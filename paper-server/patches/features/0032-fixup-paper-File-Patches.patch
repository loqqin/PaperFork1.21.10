From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: loqqin <soubmatic@gmail.com>
Date: Sat, 11 Oct 2025 22:17:45 +0300
Subject: [PATCH] fixup! paper File Patches


diff --git a/ca/spottedleaf/moonrise/patches/chunk_system/scheduling/NewChunkHolder.java b/ca/spottedleaf/moonrise/patches/chunk_system/scheduling/NewChunkHolder.java
index 2409c83b03cfa1f0285f6f7c3508dbdf53750316..5d07783f2da5da87b9a2e93f5addbd25559d1cf6 100644
--- a/ca/spottedleaf/moonrise/patches/chunk_system/scheduling/NewChunkHolder.java
+++ b/ca/spottedleaf/moonrise/patches/chunk_system/scheduling/NewChunkHolder.java
@@ -1738,6 +1738,12 @@ public final class NewChunkHolder {
         }
         try {
             final SerializableChunkData chunkData = SerializableChunkData.copyOf(this.world, chunk);
+            // loqqin если тут сделать return чанк не сохранится
+            if (true) {
+                // System.out.println("savechunk");
+                // System.out.println("return true");
+                // return true;
+            }
             PlatformHooks.get().chunkSyncSave(this.world, chunk, chunkData);
 
             chunk.tryMarkSaved();
diff --git a/net/minecraft/nbt/CompoundTag.java b/net/minecraft/nbt/CompoundTag.java
index 052ca6beb06a3256fdf04bac5f2085ad622d7df0..bebedcfc94083eb005a56f8716cece9f38988736 100644
--- a/net/minecraft/nbt/CompoundTag.java
+++ b/net/minecraft/nbt/CompoundTag.java
@@ -164,7 +164,7 @@ public final class CompoundTag implements Tag {
             return "TAG_Compound";
         }
     };
-    private final Map<String, Tag> tags;
+    public final Map<String, Tag> tags;
 
     CompoundTag(Map<String, Tag> tags) {
         this.tags = tags;
diff --git a/net/minecraft/network/protocol/game/ServerboundInteractPacket.java b/net/minecraft/network/protocol/game/ServerboundInteractPacket.java
index 68fe9533a8e0954d92df9cbd53c116c51670b1b1..87caeba242d73e6fe81d808d15e61d21116cc431 100644
--- a/net/minecraft/network/protocol/game/ServerboundInteractPacket.java
+++ b/net/minecraft/network/protocol/game/ServerboundInteractPacket.java
@@ -16,7 +16,7 @@ public class ServerboundInteractPacket implements Packet<ServerGamePacketListene
         ServerboundInteractPacket::write, ServerboundInteractPacket::new
     );
     private final int entityId;
-    private final ServerboundInteractPacket.Action action;
+    public final ServerboundInteractPacket.Action action;
     private final boolean usingSecondaryAction;
     static final ServerboundInteractPacket.Action ATTACK_ACTION = new ServerboundInteractPacket.Action() {
         @Override
@@ -91,7 +91,7 @@ public class ServerboundInteractPacket implements Packet<ServerGamePacketListene
         this.action.dispatch(handler);
     }
 
-    interface Action {
+    public interface Action {
         ServerboundInteractPacket.ActionType getType();
 
         void dispatch(ServerboundInteractPacket.Handler handler);
@@ -99,7 +99,7 @@ public class ServerboundInteractPacket implements Packet<ServerGamePacketListene
         void write(FriendlyByteBuf buffer);
     }
 
-    static enum ActionType {
+    public static enum ActionType {
         INTERACT(ServerboundInteractPacket.InteractionAction::new),
         ATTACK(buffer -> ServerboundInteractPacket.ATTACK_ACTION),
         INTERACT_AT(ServerboundInteractPacket.InteractionAtLocationAction::new);
diff --git a/net/minecraft/server/dedicated/DedicatedServerProperties.java b/net/minecraft/server/dedicated/DedicatedServerProperties.java
index e352a29c4a45fd3f397d1cf4586c5f149b4ba0d0..9d0388400ae94691c5df05515969d56382cd949d 100644
--- a/net/minecraft/server/dedicated/DedicatedServerProperties.java
+++ b/net/minecraft/server/dedicated/DedicatedServerProperties.java
@@ -108,7 +108,7 @@ public class DedicatedServerProperties extends Settings<DedicatedServerPropertie
     );
     public final String textFilteringConfig = this.get("text-filtering-config", "");
     public final int textFilteringVersion = this.get("text-filtering-version", 0);
-    public final Optional<MinecraftServer.ServerResourcePackInfo> serverResourcePackInfo;
+    public Optional<MinecraftServer.ServerResourcePackInfo> serverResourcePackInfo;
     public final DataPackConfig initialDataPackConfiguration;
     public final Settings<DedicatedServerProperties>.MutableValue<Integer> playerIdleTimeout = this.getMutable("player-idle-timeout", 0);
     public final Settings<DedicatedServerProperties>.MutableValue<Integer> statusHeartbeatInterval = this.getMutable("status-heartbeat-interval", 0);
diff --git a/net/minecraft/server/level/ChunkMap.java b/net/minecraft/server/level/ChunkMap.java
index 09af66f4da588835027f09406c2beb20372eb0e7..66ce8b8e7cd2c9d81e78ed85f02301d3dcf12e27 100644
--- a/net/minecraft/server/level/ChunkMap.java
+++ b/net/minecraft/server/level/ChunkMap.java
@@ -418,6 +418,7 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
         this.poiManager.tick(hasMoreTime);
         profilerFiller.popPush("chunk_unload");
         if (!this.level.noSave()) {
+            System.out.println("process unloads " + this.level.serverLevelData.getLevelName());
             this.processUnloads(hasMoreTime);
         }
 
diff --git a/net/minecraft/server/network/ServerGamePacketListenerImpl.java b/net/minecraft/server/network/ServerGamePacketListenerImpl.java
index 7f6cc8f111f6f5df311397a7e31e25fa2c93c685..82ffd0182f6e6ac99a96e7b04c3ac01b3b11ea43 100644
--- a/net/minecraft/server/network/ServerGamePacketListenerImpl.java
+++ b/net/minecraft/server/network/ServerGamePacketListenerImpl.java
@@ -1945,6 +1945,7 @@ public class ServerGamePacketListenerImpl
                     return;
                 case DROP_ALL_ITEMS:
                     if (!this.player.isSpectator()) {
+                        org.bukkit.Bukkit.getPluginManager().callEvent(new org.bukkit.event.player.PlayerDropStackItemEvent(player.getBukkitEntity()));
                         this.player.drop(true);
                         if (io.papermc.paper.configuration.GlobalConfiguration.get().unsupportedSettings.updateEquipmentOnPlayerActions) this.player.detectEquipmentUpdates(); // Paper - Force update attributes.
                     }
diff --git a/net/minecraft/world/entity/Entity.java b/net/minecraft/world/entity/Entity.java
index fe4128c66b70672b4aa29c85c7d033f55b1e794c..df735242e5fa29a34106bd1d5f5714ce2233519b 100644
--- a/net/minecraft/world/entity/Entity.java
+++ b/net/minecraft/world/entity/Entity.java
@@ -2298,11 +2298,11 @@ public abstract class Entity implements SyncedDataHolder, DebugValueSource, Name
                     d1 *= d2;
                     d *= 0.05F;
                     d1 *= 0.05F;
-                    if (!this.isVehicle() && this.isPushable()) {
+                    if (/*!this.isVehicle() &&*/ this.isPushable()) {
                         this.push(-d, 0.0, -d1);
                     }
 
-                    if (!entity.isVehicle() && entity.isPushable()) {
+                    if (/*!entity.isVehicle() &&*/ entity.isPushable()) {
                         entity.push(d, 0.0, d1);
                     }
                 }
diff --git a/net/minecraft/world/entity/LivingEntity.java b/net/minecraft/world/entity/LivingEntity.java
index 90483699b3f2efe9945c849adfdd38422e3a3458..9e4c6b9d7053a9f28d90783d5590e0ff6f5e3c0b 100644
--- a/net/minecraft/world/entity/LivingEntity.java
+++ b/net/minecraft/world/entity/LivingEntity.java
@@ -1451,6 +1451,9 @@ public abstract class LivingEntity extends Entity implements Attackable, Waypoin
 
             boolean flag1 = true;
             if (this.invulnerableTime > (float) this.invulnerableDuration / 2.0F && !damageSource.is(DamageTypeTags.BYPASSES_COOLDOWN)) { // CraftBukkit - restore use of maxNoDamageTicks
+                if (true) { // loqqin 31.08
+                    return false;
+                }
                 if (amount <= this.lastHurt) {
                     return false;
                 }
diff --git a/net/minecraft/world/item/crafting/ShapedRecipe.java b/net/minecraft/world/item/crafting/ShapedRecipe.java
index 4595dfcd960a05adc71ddd16ecf54a3793c255c1..83633f41654115ef9312941d1681d05f82ce68a2 100644
--- a/net/minecraft/world/item/crafting/ShapedRecipe.java
+++ b/net/minecraft/world/item/crafting/ShapedRecipe.java
@@ -18,8 +18,8 @@ import net.minecraft.world.item.crafting.display.SlotDisplay;
 import net.minecraft.world.level.Level;
 
 public class ShapedRecipe implements CraftingRecipe {
-    final ShapedRecipePattern pattern;
-    final ItemStack result;
+    public final ShapedRecipePattern pattern;
+    public ItemStack result;
     final String group;
     final CraftingBookCategory category;
     final boolean showNotification;
diff --git a/net/minecraft/world/item/crafting/ShapedRecipePattern.java b/net/minecraft/world/item/crafting/ShapedRecipePattern.java
index bfda76974ea8d4397e2c2ebf5bdcb5d7e5f0bab5..a9dc5e5ba5d71406f1abc2d0ad3add873c15c54b 100644
--- a/net/minecraft/world/item/crafting/ShapedRecipePattern.java
+++ b/net/minecraft/world/item/crafting/ShapedRecipePattern.java
@@ -39,7 +39,7 @@ public final class ShapedRecipePattern {
     private final int width;
     private final int height;
     private final List<Optional<Ingredient>> ingredients;
-    private final Optional<ShapedRecipePattern.Data> data;
+    public final Optional<ShapedRecipePattern.Data> data;
     private final int ingredientCount;
     private final boolean symmetrical;
 
diff --git a/net/minecraft/world/item/crafting/ShapelessRecipe.java b/net/minecraft/world/item/crafting/ShapelessRecipe.java
index d601b54b1de2f2ae44fe2b20c8116c71a6340e45..af2463ef012dc48ffad081c928b28a79ba892e9e 100644
--- a/net/minecraft/world/item/crafting/ShapelessRecipe.java
+++ b/net/minecraft/world/item/crafting/ShapelessRecipe.java
@@ -19,7 +19,7 @@ import net.minecraft.world.level.Level;
 public class ShapelessRecipe implements CraftingRecipe {
     final String group;
     final CraftingBookCategory category;
-    final ItemStack result;
+    public ItemStack result;
     final List<Ingredient> ingredients;
     @Nullable
     private PlacementInfo placementInfo;
diff --git a/net/minecraft/world/item/crafting/SingleItemRecipe.java b/net/minecraft/world/item/crafting/SingleItemRecipe.java
index c3e3f51bb46118bfdbdf2dd9cfd10bfe85951158..7c9d151f73ba055c4a3030fd443c942a9d89fabf 100644
--- a/net/minecraft/world/item/crafting/SingleItemRecipe.java
+++ b/net/minecraft/world/item/crafting/SingleItemRecipe.java
@@ -13,7 +13,7 @@ import net.minecraft.world.level.Level;
 
 public abstract class SingleItemRecipe implements Recipe<SingleRecipeInput> {
     private final Ingredient input;
-    private final ItemStack result;
+    public final ItemStack result;
     private final String group;
     @Nullable
     private PlacementInfo placementInfo;
diff --git a/net/minecraft/world/level/block/CactusBlock.java b/net/minecraft/world/level/block/CactusBlock.java
index 55ed28a7299c07e62399c37a1e4a7f4d74f48f3f..91d79e75adc859d9f77d2dd64cae5b340129173a 100644
--- a/net/minecraft/world/level/block/CactusBlock.java
+++ b/net/minecraft/world/level/block/CactusBlock.java
@@ -50,6 +50,9 @@ public class CactusBlock extends Block {
         }
     }
 
+    // todo loqqin
+    public static final it.unimi.dsi.fastutil.objects.Object2DoubleOpenHashMap<String> growthPercentIncrease = new it.unimi.dsi.fastutil.objects.Object2DoubleOpenHashMap<>();
+
     @Override
     protected void randomTick(BlockState state, ServerLevel level, BlockPos pos, RandomSource random) {
         BlockPos blockPos = pos.above();
diff --git a/net/minecraft/world/level/block/CocoaBlock.java b/net/minecraft/world/level/block/CocoaBlock.java
index b9284dcec878e922618eed6c523cb8cba3143e0c..f0fa210e9118a5584e456403aaad8aa302deeb06 100644
--- a/net/minecraft/world/level/block/CocoaBlock.java
+++ b/net/minecraft/world/level/block/CocoaBlock.java
@@ -48,9 +48,13 @@ public class CocoaBlock extends HorizontalDirectionalBlock implements Bonemealab
         return state.getValue(AGE) < 2;
     }
 
+    public static final it.unimi.dsi.fastutil.objects.Object2DoubleOpenHashMap<String> growthPercentIncrease = new it.unimi.dsi.fastutil.objects.Object2DoubleOpenHashMap<>();
+
     @Override
     protected void randomTick(BlockState state, ServerLevel level, BlockPos pos, RandomSource random) {
-        if (level.random.nextFloat() < (level.spigotConfig.cocoaModifier / (100.0F * 5))) { // Spigot - SPIGOT-7159: Better modifier resolution
+        double modifier = level.spigotConfig.cocoaModifier;
+        modifier += modifier / 100 * growthPercentIncrease.getDouble(level.serverLevelData.settings.levelName);
+        if (level.random.nextFloat() < (modifier / (100.0F * 5))) { // Spigot - SPIGOT-7159: Better modifier resolution
             int ageValue = state.getValue(AGE);
             if (ageValue < 2) {
                 org.bukkit.craftbukkit.event.CraftEventFactory.handleBlockGrowEvent(level, pos, state.setValue(AGE, ageValue + 1), 2); // CraftBukkit
diff --git a/net/minecraft/world/level/block/CropBlock.java b/net/minecraft/world/level/block/CropBlock.java
index b5e0243bd33e16ca5dfda019a273aad8e298d703..c1902bf96f40e88b7b301a82f77e04b385f1ef00 100644
--- a/net/minecraft/world/level/block/CropBlock.java
+++ b/net/minecraft/world/level/block/CropBlock.java
@@ -74,6 +74,8 @@ public class CropBlock extends VegetationBlock implements BonemealableBlock {
         return !this.isMaxAge(state);
     }
 
+    public static final it.unimi.dsi.fastutil.objects.Object2DoubleOpenHashMap<String> growthPercentIncrease = new it.unimi.dsi.fastutil.objects.Object2DoubleOpenHashMap<>();
+
     @Override
     protected void randomTick(BlockState state, ServerLevel level, BlockPos pos, RandomSource random) {
         if (level.getRawBrightness(pos, 0) >= 9) {
@@ -81,7 +83,7 @@ public class CropBlock extends VegetationBlock implements BonemealableBlock {
             if (age < this.getMaxAge()) {
                 float growthSpeed = getGrowthSpeed(this, level, pos);
                 // Spigot start
-                int modifier = 100;
+                double modifier = 100;
                 if (this == Blocks.BEETROOTS) {
                     modifier = level.spigotConfig.beetrootModifier;
                 } else if (this == Blocks.CARROTS) {
@@ -96,6 +98,8 @@ public class CropBlock extends VegetationBlock implements BonemealableBlock {
                     modifier = level.spigotConfig.wheatModifier;
                 }
 
+                modifier += modifier / 100 * growthPercentIncrease.getDouble(level.serverLevelData.settings.levelName);
+
                 if (random.nextFloat() < (modifier / (100.0F * (Math.floor((25.0F / growthSpeed) + 1))))) { // Spigot - SPIGOT-7159: Better modifier resolution
                     // Spigot end
                     org.bukkit.craftbukkit.event.CraftEventFactory.handleBlockGrowEvent(level, pos, this.getStateForAge(age + 1), 2); // CraftBukkit
diff --git a/net/minecraft/world/level/block/MushroomBlock.java b/net/minecraft/world/level/block/MushroomBlock.java
index d306f5f524dc64618df94c9783c2168dc561a5e3..4f4a57ed5007800be352048a0d26146f7673e5a9 100644
--- a/net/minecraft/world/level/block/MushroomBlock.java
+++ b/net/minecraft/world/level/block/MushroomBlock.java
@@ -44,9 +44,13 @@ public class MushroomBlock extends VegetationBlock implements BonemealableBlock
         return SHAPE;
     }
 
+    public static final it.unimi.dsi.fastutil.objects.Object2DoubleOpenHashMap<String> growthPercentIncrease = new it.unimi.dsi.fastutil.objects.Object2DoubleOpenHashMap<>();
+
     @Override
     protected void randomTick(BlockState state, ServerLevel level, BlockPos pos, RandomSource random) {
-        if (random.nextFloat() < (level.spigotConfig.mushroomModifier / (100.0F * 25))) { // Spigot - SPIGOT-7159: Better modifier resolution
+        double mushroomModifier = level.spigotConfig.mushroomModifier;
+        mushroomModifier += mushroomModifier / 100 * growthPercentIncrease.getDouble(level.serverLevelData.settings.levelName);
+        if (random.nextFloat() < (mushroomModifier / (100.0F * 25))) { // Spigot - SPIGOT-7159: Better modifier resolution
             int i = 5;
             int i1 = 4;
 
diff --git a/net/minecraft/world/level/block/NetherWartBlock.java b/net/minecraft/world/level/block/NetherWartBlock.java
index a8cb58de6223006150bc49b95e5964b8fc42cecc..6f57a212dcf4299a71b5b02c79d62b01a3500f52 100644
--- a/net/minecraft/world/level/block/NetherWartBlock.java
+++ b/net/minecraft/world/level/block/NetherWartBlock.java
@@ -47,10 +47,14 @@ public class NetherWartBlock extends VegetationBlock {
         return state.getValue(AGE) < 3;
     }
 
+    public static final it.unimi.dsi.fastutil.objects.Object2DoubleOpenHashMap<String> growthPercentIncrease = new it.unimi.dsi.fastutil.objects.Object2DoubleOpenHashMap<>();
+
     @Override
     protected void randomTick(BlockState state, ServerLevel level, BlockPos pos, RandomSource random) {
         int ageValue = state.getValue(AGE);
-        if (ageValue < 3 && random.nextFloat() < (level.spigotConfig.wartModifier / (100.0F * 10))) { // Spigot - SPIGOT-7159: Better modifier resolution
+        double wartModifier = level.spigotConfig.wartModifier;
+        wartModifier += wartModifier / 100 * growthPercentIncrease.getDouble(level.serverLevelData.settings.levelName);
+        if (ageValue < 3 && random.nextFloat() < (wartModifier / (100.0F * 10))) { // Spigot - SPIGOT-7159: Better modifier resolution
             state = state.setValue(AGE, ageValue + 1);
             org.bukkit.craftbukkit.event.CraftEventFactory.handleBlockGrowEvent(level, pos, state, 2); // CraftBukkit
         }
diff --git a/net/minecraft/world/level/block/StemBlock.java b/net/minecraft/world/level/block/StemBlock.java
index 2eaf1e43474a49a3315325b831bb86f2e10cc479..706dfcb7aeb61012df52390b1773cdd1fbb53cf6 100644
--- a/net/minecraft/world/level/block/StemBlock.java
+++ b/net/minecraft/world/level/block/StemBlock.java
@@ -66,11 +66,15 @@ public class StemBlock extends VegetationBlock implements BonemealableBlock {
         return state.is(Blocks.FARMLAND);
     }
 
+    public static final it.unimi.dsi.fastutil.objects.Object2DoubleOpenHashMap<String> growthPercentIncrease = new it.unimi.dsi.fastutil.objects.Object2DoubleOpenHashMap<>();
+
     @Override
     protected void randomTick(BlockState state, ServerLevel level, BlockPos pos, RandomSource random) {
         if (level.getRawBrightness(pos, 0) >= 9) {
             float growthSpeed = CropBlock.getGrowthSpeed(this, level, pos);
-            if (random.nextFloat() < ((this == Blocks.PUMPKIN_STEM ? level.spigotConfig.pumpkinModifier : level.spigotConfig.melonModifier) / (100.0F * (Math.floor((25.0F / growthSpeed) + 1))))) { // Spigot - SPIGOT-7159: Better modifier resolution
+            double modifier = this == Blocks.PUMPKIN_STEM ? level.spigotConfig.pumpkinModifier : level.spigotConfig.melonModifier;
+            modifier += modifier / 100 * growthPercentIncrease.getDouble(level.serverLevelData.settings.levelName);
+            if (random.nextFloat() < (modifier / (100.0F * (Math.floor((25.0F / growthSpeed) + 1))))) { // Spigot - SPIGOT-7159: Better modifier resolution
                 int ageValue = state.getValue(AGE);
                 if (ageValue < 7) {
                     state = state.setValue(AGE, ageValue + 1);
diff --git a/net/minecraft/world/level/block/SugarCaneBlock.java b/net/minecraft/world/level/block/SugarCaneBlock.java
index a8de37e173e244d7a16c19ac8805e0e4327c837a..5e74e2c80b29398b3f99efab97743678b2def9ea 100644
--- a/net/minecraft/world/level/block/SugarCaneBlock.java
+++ b/net/minecraft/world/level/block/SugarCaneBlock.java
@@ -46,6 +46,8 @@ public class SugarCaneBlock extends Block {
         }
     }
 
+    public static final it.unimi.dsi.fastutil.objects.Object2DoubleOpenHashMap<String> growthPercentIncrease = new it.unimi.dsi.fastutil.objects.Object2DoubleOpenHashMap<>();
+
     @Override
     protected void randomTick(BlockState state, ServerLevel level, BlockPos pos, RandomSource random) {
         if (level.isEmptyBlock(pos.above())) {
@@ -57,7 +59,8 @@ public class SugarCaneBlock extends Block {
 
             if (i < level.paperConfig().maxGrowthHeight.reeds) { // Paper - Configurable cactus/bamboo/reed growth height
                 int ageValue = state.getValue(AGE);
-                int modifier = level.spigotConfig.caneModifier; // Spigot - SPIGOT-7159: Better modifier resolution
+                double modifier = level.spigotConfig.caneModifier; // Spigot - SPIGOT-7159: Better modifier resolution
+                modifier += modifier / 100 * growthPercentIncrease.getDouble(level.serverLevelData.settings.levelName);
                 if (ageValue >= 15 || (modifier != 100 && random.nextFloat() < (modifier / (100.0F * 16)))) { // Spigot - SPIGOT-7159: Better modifier resolution
                     org.bukkit.craftbukkit.event.CraftEventFactory.handleBlockGrowEvent(level, pos.above(), this.defaultBlockState(), 3); // CraftBukkit
                     level.setBlock(pos, state.setValue(AGE, 0), 260);
